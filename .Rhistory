testSet <- segmentationOriginal[segmentationOriginal$Case =="Test",]
set.seed(125)
model_rpart <- train(Class~.,data=trainSet,method="rpart")
predict(modelFit, newdata = new.data)
fancyRpartPlot(model_rpart$finalModel)
library(rattle)
install.packages("rattle", dependencies = T)
library(rattle)
install.packages("rattle", dependencies = T)
library(rattle)
install.packages("rattle", dependencies = true)
library(rattle)
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("AppliedPredictiveModeling", dependencies = TRUE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
test <- segmentationOriginal[which(segmentationOriginal$Case == "Test"), ]
train <- segmentationOriginal[which(segmentationOriginal$Case == "Train"), ]
set.seed(125)
fit <- train(Class ~ ., data=train, method = "rpart")
library(rattle)
library(rpart.plot)
fancyRpartPlot(fit$finalModel)
install.packages('e1071', dependencies=TRUE)
set.seed(125)
fit <- train(Class ~ ., data=train, method = "rpart")
library(rattle)
library(rpart.plot)
fancyRpartPlot(fit$finalModel)
install.packages('rattle', dependencies=TRUE)
set.seed(125)
fit <- train(Class ~ ., data=train, method = "rpart")
library(rattle)
library(rpart.plot)
fancyRpartPlot(fit$finalModel)
testA <- segmentationOriginal[0,]
testA
testA[1,c("TotalIntenCh2", "FiberWidthCh1", "PerimStatusCh1")] <- c(23000, 10, 2)
testA
predict(modCART, testA, type="prob")
modCART <- rpart(Class ~ ., data=subset$Train)
subset <- split(segmentationOriginal, segmentationOriginal$Case)
set.seed(125)
modCART <- rpart(Class ~ ., data=subset$Train)
modCART
testA <- segmentationOriginal[0,]
testA[1,c("TotalIntenCh2", "FiberWidthCh1", "PerimStatusCh1")] <- c(23000, 10, 2)
predict(modCART, testA, type="prob")
testD <- segmentationOriginal[0,]
testD[1,c("FiberWidthCh1", "VarIntenCh4","PerimStatusCh1")] <- c(8, 100, 2)
predict(modCART, testD, type="prob")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
str(segmentationOriginal)
library(dplyr)
train <- filter(segmentationOriginal, Case = train)
train <- filter(segmentationOriginal, Case == train)
?filter
train <- filter(segmentationOriginal, Case == "train")
str(train)
head(train)
train <- filter(segmentationOriginal, Case == "Train")
head(train)
testing <- filter(segmentationOriginal, Case == "Test")
head(testing)
testing <- segmentationOriginal[, segmentationOriginal$Case == "Test"]
testing <- segmentationOriginal[, segmentationOriginal$Case == "Test"]
testing <- segmentationOriginal[, segmentationOriginal$Case = "Test"]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
head(testing)
set.seed(125)
fitModel <- train(Case ~ ., method = "lm", data = trainig)
fitModel <- train(Case ~ ., method = "rpart", data = trainig)
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
fitModel <- train(Case ~ ., method = "rpart", data = trainig)
fitModel <- train(Case ~ ., method = "rpart", data = train)
fitModel <- train(Case ~ ., method = "rpart", data = training)
fitModel <- train(Case ~ ., method = "rpart", data = trainig)
model_rpart <- train(Class~.,data=train,method="rpart")
print(model_rpart)
print(model_rpart$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
trainSet <- segmentationOriginal[segmentationOriginal$Case =="Train",]
testSet <- segmentationOriginal[segmentationOriginal$Case =="Test",]
set.seed(125)
model_rpart <- train(Class~.,data=trainSet,method="rpart")
print(model_rpart$finalModel)
print(model_rpart)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm", dependencies = T)
install.packages("pgmm", dependencies = T)
getwd()
df <- readRDS("olive.rda")
df <- load(file = "olive.rda")
df
load(file = "olive.rda")
load(file = "olive.rda")
View(olive)
modelFit <- train(Area ~ ., data = training, method = "rpart")
modelFit <- train(Area ~ ., data = olive, method = "rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(modelFit, newdata = newdata)
newdata
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn", dependencies = T)
set.seed(13234)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
fit =lm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data= trainSA)
fit =trainchd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data= trainSA)
fit =train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data= trainSA)
trainSA$chd <- factor(trainSA$chd)
str(trainSA)
fit =train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data= trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
pred <- predict(fit, newdata = trainSA)
missClass(trainSA$chd, pred)
missClass(trainSA, pred)
missClassTrain <- missClass(trainSA$chd,predict(regModel,newdata=trainSA))
missClassTrain <- missClass(trainSA$chd,predict(fit,newdata=trainSA))
regModel <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
set.seed(13234)
# definition of the training model
regModel <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClassTrain <- missClass(trainSA$chd,predict(regModel,newdata=trainSA))
missClassTest <- missClass(testSA$chd,predict(regModel,newdata=testSA))
missClassTrain
missClassTest
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y <- factor(vowel.test$y);
vowel.train$y <- factor(vowel.train$y);
set.seed(33833)
fitModel <- train(y~., data=vowel.train, method="rf")
?varImp
varImp (fitModel)
fitModel <- randomForest(y~., data=vowel.train)
library(randomForest)
fitModel <- randomForest(y~., data=vowel.train)
varImp (fitModel)
order(varImp(modelRF),decreasing=TRUE)
order(varImp(fit),decreasing=TRUE)
order(varImp(fitModel),decreasing=TRUE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y <- factor(vowel.test$y)
vowel.train$y <- factor(vowel.train$y)
set.seed(33833)
fit <- train(y ~ ., method="rf", data=vowel.train)
library(caret)
fit <- train(y ~ ., method="rf", data=vowel.train)
fit2 <- train(y ~ ., method="gbm", data=vowel.train)
pred1 <- predict(fit, vowel.test)
print(pred1)
pred2 <- predict(fit2, vowel.test)
sqrt(sum(pred - vowel.test)^2)
sqrt(sum(pred1 - vowel.test)^2)
sqrt(sum(pred1 - vowel.test$y)^2)
sqrt(sum((pred1 - vowel.test$y^2))
;
sqrt(sum((pred1 - vowel.test$y)^2))
pred1 - vowel.test$y
vowel.test$y
pred1
library(ILSR)
library(ISLR)
install.packages("ISLT",dependencies = T)
install.packages("ISLR",dependencies = T)
library(ISLR)
data(Wage)
str(Wage)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
fit1 <- train(y~., data =  vowel.train , method="rf")
load(caret)
load(carot)
library(caret)
fit1 <- train(y~., data =  vowel.train , method="rf")
fit2 <- train(y~., data =  vowel.train , method="gbm")
pred1 <- predict(fit1, vowel.test)
pred2 <- predict(fit2, vowel.test)
confusionMatrix(pred1, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
mod_gbm <- train(y ~ ., data = vowel.train, method = "gbm")
pred_rf <- predict(mod_rf, vowel.test)
pred_gbm <- predict(mod_gbm, vowel.test)
confusionMatrix(pred_rf, vowel.test$y)$overall[1]
predDF <- data.frame(pred_rf, pred_gbm, y = vowel.test$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
str(inTrain)
str(training)
fit1 <- train(diagnosis~., data = "training", method="rf")
fit1 <- train(diagnosis ~ ., data = training, method="rf")
fit2 <- train(diagnosis ~ ., data = training, method="gbm")
fit3 <- train(diagnosis ~ ., data = training, method="lda")
predict1 <- predict(fit1, testing)
predict2 <- predict(fit2, testing)
predict3 <- predict(fit3, testing)
comboDF <- data.frame(predict1,predict2,predict3,testing$diagnosis)
comboFit <- train(diagnosis ~ ., data = comboDF, method="rf")
comboDF <- data.frame(predict1,predict2,predict3,diagnosis = testing$diagnosis)
comboFit <- train(diagnosis ~ ., data = comboDF, method="rf")
combopred <- predict(combofit,comboDF)
combopred <- predict(comboFit,comboDF)
confusionMatrix(predict1, testing)
confusionMatrix(predict1, testing$diagnosis)
confusionMatrix(predict2, testing$diagnosis)
confusionMatrix(predict3, testing$diagnosis)
confusionMatrix(combopred, testing$diagnosis)
?plot.enet
??plot.enet
elasticnet
librarY(elasticnet)
librari(elasticnet)
load(elasticnet)
library(elasticnet)
install.packages("elasticnet", dependencies = T)
library(elasticnet)
?plot.enet
library(rpart.plot)
library(rpart.plot)
rpart.plot(model_rpart)
install.packages("pander", dependencies = )
install.packages("pander", dependencies = T)
install.packages("pander", dependencies = T)
library(pander)
kable()
library(ISLR)
fit = lm(Sales ~ . + Income:Advertising + Price:Age, data = Carseats)
summary(fit)
attach(carseats)
attach(Carseats)
contrasts(ShelveLoc)
library(ISLR)
names(Smarket)
dim(Smarket)
summaty(Smarket)
summary(Smarket)
pairs(Smarket)
cor(Smarket)
cor(Smarket[,-9])
plot(Smarket$Volume)
attach(Smarket)
plot(Smarket)
plot(Volume)
library(ISLR)
cor(Smarket)
cor(Smarket[,-9])
glm.fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data = Smarket, family=binomial)
summary(glm.fit)
str(Smarket)
head(Smarket)
? Smarket
? contrast
? contrasts
mtcars
plotly()
plot_ly()
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type="scatter", color=~factory(cyl), size=~hp)
plot_ly(mtcars, x = ~wt, y = ~mpg, type="scatter", color=~factor(cyl), size=~hp)
?mtcars
shiny::runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
library(MASS)
shiny::runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
library(ISLR)
head(Auto)
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
poly(Auto$horsepower,5)
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
fit <- lm(mpg ~ poly(horsepower,2), data = Auto)
dim(Auto$horsepower)
length(Auto$horsepower)
length(fit$fitted)
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
shiny::runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
shiny::runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
shiny::runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
x    <- 5
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
fit <- lm(medv ~ poly(lstat,x) ,data = Boston)
fitLinear <- lm(medv ~ lstat ,data = Boston)
isolate(anova(fitLinear, fit))
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
?isolate
?anova
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
x <- 5
fit <- lm(medv ~ poly(lstat,x) ,data = Boston)
fitLinear <- lm(medv ~ lstat ,data = Boston)
anova(fitLinear, fit)
aov(fitLinear, fit)
fit <- lm(medv ~ poly(lstat,x) ,data = Boston)
fitLinear <- lm(medv ~ lstat ,data = Boston)
anova(fitLinear, fit)
anova(fitLinear, fit)["Signif. codes"]
classes(anova(fitLinear, fit))
class(anova(fitLinear, fit))
anova(fitLinear, fit)[0,0]
anova(fitLinear, fit)[0]
anova(fitLinear, fit)[]
dt <- anova(fitLinear, fit)
dim(dt)
dt[1,1]
dt[1,6]
dt[2,6]
dt[2,5]
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
shiny::runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
shiny::runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
shiny::runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
shiny::runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
shiny::runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
fit <- lm(medv ~ lstat * age, data=Boston)
abline(fit)
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
shiny::runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
runApp('DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication')
setwd("~/DatascienceRExercise/Shiny Application and Reproducible Pitch/MyShinyApplication")
